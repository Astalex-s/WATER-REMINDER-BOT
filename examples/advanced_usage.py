"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WaterReminder Bot
"""
import asyncio
import sys
from pathlib import Path
from datetime import datetime, date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from src.database import db_manager
from src.motivation import motivation_manager
from src.stats import stats_manager
from src.scheduler import scheduler


async def test_motivation_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏:")
    
    user_id = 123456789
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    tests = [
        ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ", motivation_manager.get_water_reminder(user_id)),
        ("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞", motivation_manager.get_intake_confirmation(user_id, 500, 2000)),
        ("–£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", motivation_manager.get_morning_motivation(user_id)),
        ("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", motivation_manager.get_follow_up_reminder(user_id)),
        ("–û—Å–æ–±–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", motivation_manager.get_special_motivation(user_id)),
        ("–ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç", motivation_manager.get_scientific_fact(user_id)),
        ("–°–ª—É—á–∞–π–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", motivation_manager.get_random_motivation(user_id))
    ]
    
    for test_name, test_func in tests:
        try:
            result = await test_func
            print(f"‚úÖ {test_name}: {result[:50]}...")
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")


async def test_stats_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    
    user_id = 123456789
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –≤–æ–¥—ã
    volumes = [250, 300, 200, 250, 500]
    for volume in volumes:
        await db_manager.add_water_intake(user_id, volume)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    daily_stats = await stats_manager.get_daily_stats(user_id)
    weekly_stats = await stats_manager.get_weekly_stats(user_id)
    
    print(f"–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: {daily_stats['current_ml']} –º–ª")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {daily_stats['percentage']:.1f}%")
    print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: {daily_stats['progress_bar']}")
    
    print(f"\n–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –û–±—â–∏–π –æ–±—ä–µ–º: {weekly_stats['total_ml']} –º–ª")
    print(f"  –°—Ä–µ–¥–Ω–∏–π –≤ –¥–µ–Ω—å: {weekly_stats['avg_daily']:.0f} –º–ª")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {weekly_stats['weekly_percentage']:.1f}%")


async def test_scheduler():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
    
    user_id = 123456789
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    schedule = scheduler.get_reminder_schedule()
    print(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å:")
    for i, time_slot in enumerate(schedule, 1):
        print(f"  {i}. {time_slot}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    pending_reminders = await db_manager.get_pending_reminders(datetime.now())
    print(f"\n–û–∂–∏–¥–∞—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(pending_reminders)}")


async def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:")
    
    user_id = 123456789
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.create_user(user_id, "test_user", 2000)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.user_id}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
    await db_manager.update_user_goal(user_id, 2500)
    updated_user = await db_manager.get_user(user_id)
    print(f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {updated_user.daily_goal} –º–ª")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –≤–æ–¥—ã
    for i, volume in enumerate([250, 300, 200, 250, 500]):
        intake_id = await db_manager.add_water_intake(user_id, volume)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å {i+1} –¥–æ–±–∞–≤–ª–µ–Ω–∞: ID {intake_id}, –æ–±—ä–µ–º {volume}–º–ª")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    history = await db_manager.get_intake_history(user_id, 10)
    print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(history)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞
    daily_intake = await db_manager.get_daily_intake(user_id)
    print(f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–µ–º: {daily_intake} –º–ª")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WaterReminder Bot")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await db_manager.init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        await test_motivation_system()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await test_stats_system()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await test_scheduler()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
        await test_database_operations()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await scheduler.stop()
        print("\nüõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())



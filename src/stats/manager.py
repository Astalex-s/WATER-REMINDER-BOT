"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""
from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Tuple

from src.database import db_manager
from src.motivation import motivation_manager


class StatsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    def __init__(self):
        pass
    
    async def get_daily_stats(self, user_id: int, target_date: date = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"""
        if target_date is None:
            target_date = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_manager.get_user(user_id)
        if not user:
            return {}
        
        goal_ml = user.daily_goal
        current_ml = await db_manager.get_daily_intake(user_id, target_date)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        percentage = min((current_ml / goal_ml) * 100, 100)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = motivation_manager.get_progress_bar(current_ml, goal_ml)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if percentage >= 100:
            status = "goal_achieved"
            status_text = "üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
        elif percentage >= 75:
            status = "almost_there"
            status_text = "üî• –ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!"
        elif percentage >= 50:
            status = "halfway"
            status_text = "‚ö° –ù–∞ –ø–æ–ª–ø—É—Ç–∏!"
        elif percentage >= 25:
            status = "getting_started"
            status_text = "üå± –ù–∞—á–∞–ª–∏ –ø—É—Ç—å!"
        else:
            status = "just_started"
            status_text = "üíß –¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ–º!"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–µ–º–æ–≤ –∑–∞ –¥–µ–Ω—å
        intake_history = await self._get_daily_intake_history(user_id, target_date)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ –ø—Ä–∏–µ–º
        avg_per_intake = current_ml / len(intake_history) if intake_history else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        next_reminder = await self._get_next_reminder_time()
        
        return {
            'current_ml': current_ml,
            'goal_ml': goal_ml,
            'percentage': percentage,
            'progress_bar': progress_bar,
            'status': status,
            'status_text': status_text,
            'intake_count': len(intake_history),
            'avg_per_intake': avg_per_intake,
            'intake_history': intake_history,
            'next_reminder': next_reminder,
            'date': target_date.isoformat()
        }
    
    async def _get_daily_intake_history(self, user_id: int, target_date: date) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–µ–º–æ–≤ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å"""
        history = await db_manager.get_intake_history(user_id, 50)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        target_date_str = target_date.isoformat()
        return [
            {
                'volume': record.volume,
                'timestamp': record.timestamp.strftime('%H:%M') if record.timestamp else 'Unknown'
            }
            for record in history
            if record.timestamp and record.timestamp.date() == target_date
        ]
    
    async def _get_next_reminder_time(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        from src.scheduler import scheduler
        schedule = scheduler.get_reminder_schedule()
        now = datetime.now().time()
        
        for reminder_time in schedule:
            if reminder_time > now:
                return reminder_time.strftime("%H:%M")
        
        return "–ó–∞–≤—Ç—Ä–∞ –≤ 8:00"
    
    async def get_weekly_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        weekly_data = await db_manager.get_weekly_stats(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_ml = sum(day['total'] for day in weekly_data)
        days_with_data = len(weekly_data)
        avg_daily = total_ml / 7 if weekly_data else 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_manager.get_user(user_id)
        goal_ml = user.daily_goal if user else 2000
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        weekly_percentage = min((total_ml / (goal_ml * 7)) * 100, 100)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        chart = self._create_weekly_chart(weekly_data, goal_ml)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–Ω–∏
        best_day = max(weekly_data, key=lambda x: x['total']) if weekly_data else None
        worst_day = min(weekly_data, key=lambda x: x['total']) if weekly_data else None
        
        return {
            'total_ml': total_ml,
            'avg_daily': avg_daily,
            'weekly_percentage': weekly_percentage,
            'days_with_data': days_with_data,
            'chart': chart,
            'best_day': best_day,
            'worst_day': worst_day,
            'goal_ml': goal_ml
        }
    
    def _create_weekly_chart(self, weekly_data: List[Dict[str, Any]], goal_ml: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        chart_lines = []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        chart_lines.append("üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é:*")
        chart_lines.append("")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        
        for i, day_name in enumerate(days):
            if i < len(weekly_data):
                day_data = weekly_data[i]
                percentage = min((day_data['total'] / goal_ml) * 100, 100)
                filled_blocks = int(percentage / 10)
                empty_blocks = 10 - filled_blocks
                
                bar = "‚ñà" * filled_blocks + "‚ñë" * empty_blocks
                chart_lines.append(f"{day_name}: {bar} {percentage:.0f}% ({day_data['total']}–º–ª)")
            else:
                chart_lines.append(f"{day_name}: ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0% (0–º–ª)")
        
        return "\n".join(chart_lines)
    
    async def get_achievements(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        achievements = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = date.today() - timedelta(days=30)
        consecutive_days = await self._get_consecutive_days(user_id, thirty_days_ago)
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
        if consecutive_days >= 7:
            achievements.append({
                'name': '–ù–µ–¥–µ–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                'description': '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ',
                'icon': 'üèÜ',
                'unlocked': True
            })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
        if consecutive_days >= 30:
            achievements.append({
                'name': '–ú–µ—Å—è—Ü –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞',
                'description': '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ',
                'icon': 'üëë',
                'unlocked': True
            })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: 100% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
        today_stats = await self.get_daily_stats(user_id)
        if today_stats.get('percentage', 0) >= 100:
            achievements.append({
                'name': '–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å',
                'description': '–í—ã–ø–æ–ª–Ω–∏–ª–∏ 100% —Ü–µ–ª–∏ –∑–∞ –¥–µ–Ω—å',
                'icon': 'üíé',
                'unlocked': True
            })
        
        return achievements
    
    async def _get_consecutive_days(self, user_id: int, start_date: date) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏"""
        user = await db_manager.get_user(user_id)
        if not user:
            return 0
        
        goal_ml = user.daily_goal
        consecutive_days = 0
        current_date = date.today()
        
        while current_date >= start_date:
            daily_intake = await db_manager.get_daily_intake(user_id, current_date)
            if daily_intake >= goal_ml:
                consecutive_days += 1
                current_date -= timedelta(days=1)
            else:
                break
        
        return consecutive_days
    
    async def get_motivational_summary(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        daily_stats = await self.get_daily_stats(user_id)
        weekly_stats = await self.get_weekly_stats(user_id)
        
        current_ml = daily_stats['current_ml']
        goal_ml = daily_stats['goal_ml']
        percentage = daily_stats['percentage']
        
        # –°–æ–∑–¥–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if percentage >= 100:
            return f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –¥–Ω—è! –í–∞—à–µ —Ç–µ–ª–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å –∑–∞ –∑–∞–±–æ—Ç—É! ‚ú®"
        elif percentage >= 75:
            return f"üî• *–û—Ç–ª–∏—á–Ω–æ!* –í—ã –Ω–∞ —Ñ–∏–Ω–∏—à–Ω–æ–π –ø—Ä—è–º–æ–π! –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {goal_ml - current_ml}–º–ª –¥–æ —Ü–µ–ª–∏! üí™"
        elif percentage >= 50:
            return f"‚ö° *–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!* –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–æ–≤–∏–Ω—É –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü"
        elif percentage >= 25:
            return f"üå± *–ù–∞—á–∞–ª–∏ –ø—É—Ç—å!* –ö–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –∑–¥–æ—Ä–æ–≤—å—é! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å! üíß"
        else:
            return f"üíß *–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å!* –í–∞—à–µ —Ç–µ–ª–æ –∂–¥–µ—Ç –ø–µ—Ä–≤–æ–π –ø–æ—Ä—Ü–∏–∏ –∂–∏–≤–∏—Ç–µ–ª—å–Ω–æ–π –≤–ª–∞–≥–∏! –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ! üöÄ"



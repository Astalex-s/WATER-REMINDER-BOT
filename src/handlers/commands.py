"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.database import db_manager
from src.motivation import motivation_manager
from src.stats import stats_manager
from src.scheduler import scheduler
from config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db_manager.create_user(user_id, username)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await scheduler.schedule_daily_reminders(user_id)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """
üíß *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WaterReminder!* üåä

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –∫ –∑–¥–æ—Ä–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–µ –ø–∏—Ç—å –≤–æ–¥—É! 

üéØ *–ú–æ—è —Ü–µ–ª—å:* –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–ø–∏–≤–∞—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å
‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å 8:00 –¥–æ 22:00
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
üí´ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è:* –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã

*–ß—Ç–æ —è –±—É–¥—É –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 1 —á–∞—Å 45 –º–∏–Ω—É—Ç
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏ 2000–º–ª
‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –æ –≤–æ–¥–µ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üöÄ *–ù–∞—á–Ω–µ–º –Ω–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é!*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–∏
/motivate - —Å–ª—É—á–∞–π–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è

üíù *–ü–æ–º–Ω–∏—Ç–µ:* –∫–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã - —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ!
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø—É—Ç—å", callback_data="start_journey"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton(text="üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivate")
        ]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.clear()


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    stats = await stats_manager.get_daily_stats(user_id)
    
    if not stats:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*

{stats['progress_bar']}

*–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* {stats['current_ml']}/{stats['goal_ml']} –º–ª
*–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {stats['percentage']:.1f}%
*–°—Ç–∞—Ç—É—Å:* {stats['status_text']}

*–ü—Ä–∏–µ–º–æ–≤ –≤–æ–¥—ã:* {stats['intake_count']}
*–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ –ø—Ä–∏–µ–º:* {stats['avg_per_intake']:.0f} –º–ª
*–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* {stats['next_reminder']}

{motivation_manager.get_progress_bar(stats['current_ml'], stats['goal_ml'])}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats"),
            InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
        ],
        [
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤", callback_data="intake_history")
        ]
    ])
    
    await message.answer(stats_text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.get_user(user_id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ WaterReminder*

*–¢–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å:* {user.daily_goal} –º–ª
*–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:* 8:00 - 22:00
*–ò–Ω—Ç–µ—Ä–≤–∞–ª:* –∫–∞–∂–¥—ã–µ 1 —á–∞—Å 45 –º–∏–Ω—É—Ç
*–û–±—ä–µ–º –∑–∞ –ø—Ä–∏–µ–º:* 250 –º–ª

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="change_goal")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await message.answer(settings_text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(Command("motivate"))
async def cmd_motivate(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /motivate"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    motivation_text = await motivation_manager.get_random_motivation(user_id)
    
    if not motivation_text:
        motivation_text = "üíß *–ü–æ–º–Ω–∏—Ç–µ:* –∫–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã - —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ! ‚ú®"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí´ –ï—â–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏", callback_data="motivate"),
            InlineKeyboardButton(text="üî¨ –ù–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã", callback_data="scientific_facts")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await message.answer(motivation_text, reply_markup=keyboard, parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)
async def send_reminder_message(user_id: int, reminder_id: int, reminder_type: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    from src.bot import bot
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if reminder_type == 'morning':
            message_text = await motivation_manager.get_morning_motivation(user_id)
        elif reminder_type == 'follow_up':
            message_text = await motivation_manager.get_follow_up_reminder(user_id)
        else:
            message_text = await motivation_manager.get_water_reminder(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–ø–∏–ª(250–º–ª)", callback_data=f"water_intake_250_{reminder_id}"),
                InlineKeyboardButton(text="üîÑ –í—ã–ø–∏–ª –±–æ–ª—å—à–µ", callback_data=f"water_intake_custom_{reminder_id}")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data=f"postpone_{reminder_id}"),
                InlineKeyboardButton(text="üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è!", callback_data="motivate")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(user_id, message_text, reply_markup=keyboard, parse_mode="Markdown")
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await db_manager.mark_reminder_completed(reminder_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await db_manager.mark_reminder_skipped(reminder_id)



"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from src.database import db_manager
from src.motivation import motivation_manager
from src.stats import stats_manager
from src.scheduler import scheduler
from src.states import WaterReminderStates, SettingsStates
from config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


@router.callback_query(F.data == "start_journey")
async def callback_start_journey(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –ø—É—Ç—å'"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await stats_manager.get_daily_stats(callback.from_user.id)
    
    if stats:
        journey_text = f"""
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é!*

{stats['progress_bar']}

*–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* {stats['current_ml']}/{stats['goal_ml']} –º–ª
*–°—Ç–∞—Ç—É—Å:* {stats['status_text']}

*–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* {stats['next_reminder']}

üíß *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?* –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 1 —á–∞—Å 45 –º–∏–Ω—É—Ç!
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–ø–∏–ª(250–º–ª)", callback_data="water_intake_250"),
                InlineKeyboardButton(text="üîÑ –í—ã–ø–∏–ª –±–æ–ª—å—à–µ", callback_data="water_intake_custom")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ]
        ])
        
        await callback.message.edit_text(journey_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "water_intake_250")
async def callback_water_intake_250(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–ø–∏–ª(250–º–ª)'"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –≤–æ–¥—ã
    await db_manager.add_water_intake(user_id, settings.WATER_PER_SESSION_ML)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await stats_manager.get_daily_stats(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = await motivation_manager.get_intake_confirmation(
        user_id, stats['current_ml'], stats['goal_ml']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–µ—Ö
    milestone_messages = []
    for milestone in [50, 75, 95]:
        if stats['percentage'] >= milestone:
            milestone_msg = await motivation_manager.get_milestone_message(user_id, milestone)
            if milestone_msg:
                milestone_messages.append(milestone_msg)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
    if stats['percentage'] >= 100:
        goal_msg = await motivation_manager.get_goal_achieved_message(user_id)
        milestone_messages.append(goal_msg)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    full_message = confirmation_text
    if milestone_messages:
        full_message += "\n\n" + "\n\n".join(milestone_messages)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivate")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(full_message, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "water_intake_custom")
async def callback_water_intake_custom(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–ø–∏–ª –±–æ–ª—å—à–µ'"""
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="150–º–ª", callback_data="water_volume_150"),
            InlineKeyboardButton(text="200–º–ª", callback_data="water_volume_200")
        ],
        [
            InlineKeyboardButton(text="250–º–ª", callback_data="water_volume_250"),
            InlineKeyboardButton(text="300–º–ª", callback_data="water_volume_300")
        ],
        [
            InlineKeyboardButton(text="500–º–ª", callback_data="water_volume_500")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(
        "üíß *–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã:*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("water_volume_"))
async def callback_water_volume(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞ –≤–æ–¥—ã"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º –∏–∑ callback_data
    volume = int(callback.data.split("_")[-1])
    
    user_id = callback.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –≤–æ–¥—ã
    await db_manager.add_water_intake(user_id, volume)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await stats_manager.get_daily_stats(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = await motivation_manager.get_intake_confirmation(
        user_id, stats['current_ml'], stats['goal_ml']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–µ—Ö
    milestone_messages = []
    for milestone in [50, 75, 95]:
        if stats['percentage'] >= milestone:
            milestone_msg = await motivation_manager.get_milestone_message(user_id, milestone)
            if milestone_msg:
                milestone_messages.append(milestone_msg)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
    if stats['percentage'] >= 100:
        goal_msg = await motivation_manager.get_goal_achieved_message(user_id)
        milestone_messages.append(goal_msg)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    full_message = confirmation_text
    if milestone_messages:
        full_message += "\n\n" + "\n\n".join(milestone_messages)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivate")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(full_message, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    stats = await stats_manager.get_daily_stats(user_id)
    
    if not stats:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*

{stats['progress_bar']}

*–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* {stats['current_ml']}/{stats['goal_ml']} –º–ª
*–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {stats['percentage']:.1f}%
*–°—Ç–∞—Ç—É—Å:* {stats['status_text']}

*–ü—Ä–∏–µ–º–æ–≤ –≤–æ–¥—ã:* {stats['intake_count']}
*–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ –ø—Ä–∏–µ–º:* {stats['avg_per_intake']:.0f} –º–ª
*–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* {stats['next_reminder']}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats"),
            InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
        ],
        [
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤", callback_data="intake_history")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "weekly_stats")
async def callback_weekly_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    weekly_stats = await stats_manager.get_weekly_stats(user_id)
    
    if not weekly_stats:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    weekly_text = f"""
üìà *–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–û–±—â–∏–π –æ–±—ä–µ–º:* {weekly_stats['total_ml']} –º–ª
*–°—Ä–µ–¥–Ω–∏–π –≤ –¥–µ–Ω—å:* {weekly_stats['avg_daily']:.0f} –º–ª
*–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {weekly_stats['weekly_percentage']:.1f}%
*–î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏:* {weekly_stats['days_with_data']}/7

{weekly_stats['chart']}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(weekly_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "achievements")
async def callback_achievements(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = await stats_manager.get_achievements(user_id)
    
    if not achievements:
        achievements_text = """
üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
‚Ä¢ üèÜ –ù–µ–¥–µ–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã - 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ üëë –ú–µ—Å—è—Ü –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ - 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ üíé –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å - 100% —Ü–µ–ª–∏ –∑–∞ –¥–µ–Ω—å

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ!
"""
    else:
        achievements_text = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
        for achievement in achievements:
            achievements_text += f"{achievement['icon']} *{achievement['name']}*\n{achievement['description']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton(text="üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivate")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(achievements_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "motivate")
async def callback_motivate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    motivation_text = await motivation_manager.get_random_motivation(user_id)
    
    if not motivation_text:
        motivation_text = "üíß *–ü–æ–º–Ω–∏—Ç–µ:* –∫–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã - —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ! ‚ú®"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí´ –ï—â–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏", callback_data="motivate"),
            InlineKeyboardButton(text="üî¨ –ù–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã", callback_data="scientific_facts")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(motivation_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "scientific_facts")
async def callback_scientific_facts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—É—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç
    fact_text = await motivation_manager.get_scientific_fact(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¨ –ï—â–µ —Ñ–∞–∫—Ç—ã", callback_data="scientific_facts"),
            InlineKeyboardButton(text="üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivate")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(fact_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "settings")
async def callback_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.get_user(user_id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notification_status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "üîï –í—ã–∫–ª—é—á–µ–Ω—ã"
    
    settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ WaterReminder*

*–¢–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å:* {user.daily_goal} –º–ª
*–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:* {user.start_hour:02d}:00 - {user.end_hour:02d}:00
*–ò–Ω—Ç–µ—Ä–≤–∞–ª:* –∫–∞–∂–¥—ã–µ 1 —á–∞—Å 45 –º–∏–Ω—É—Ç
*–û–±—ä–µ–º –∑–∞ –ø—Ä–∏–µ–º:* 250 –º–ª
*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {notification_status}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="change_goal")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "change_goal")
async def callback_change_goal(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–∏"""
    await callback.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(SettingsStates.changing_daily_goal)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.get_user(callback.from_user.id)
    current_goal = user.daily_goal if user else 2000
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–ª–µ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1500–º–ª", callback_data="goal_1500"),
            InlineKeyboardButton(text="2000–º–ª", callback_data="goal_2000")
        ],
        [
            InlineKeyboardButton(text="2500–º–ª", callback_data="goal_2500"),
            InlineKeyboardButton(text="3000–º–ª", callback_data="goal_3000")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")
        ]
    ])
    
    await callback.message.edit_text(
        f"üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å:*\n\n*–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:* {current_goal}–º–ª",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("goal_"))
async def callback_set_goal(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å –∏–∑ callback_data
    goal = int(callback.data.split("_")[1])
    
    user_id = callback.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db_manager.update_user_goal(user_id, goal)
    
    # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
    await scheduler.cancel_user_reminders(user_id)
    await scheduler.schedule_daily_reminders(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"‚úÖ *–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n–ù–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: {goal}–º–ª\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Ü–µ–ª–∏.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.clear()


@router.callback_query(F.data == "toggle_notifications")
async def callback_toggle_notifications(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.get_user(user_id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    current_status = user.notifications_enabled
    new_status = not current_status
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db_manager.update_user_notifications(user_id, new_status)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
    user.notifications_enabled = new_status
    
    # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if new_status:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        await scheduler.cancel_user_reminders(user_id)
        await scheduler.schedule_daily_reminders(user_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã"
        status_icon = "üîî"
    else:
        # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã, –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await scheduler.cancel_user_reminders(user_id)
        status_text = "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        status_icon = "üîï"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(
        f"{status_icon} *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}!*\n\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ —Ç–µ–ø–µ—Ä—å {status_text}.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "change_time")
async def callback_change_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(SettingsStates.changing_time)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.get_user(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    start_hour, end_hour = user.start_hour, user.end_hour
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="7:00 - 21:00", callback_data="time_7_21"),
            InlineKeyboardButton(text="8:00 - 22:00", callback_data="time_8_22")
        ],
        [
            InlineKeyboardButton(text="9:00 - 23:00", callback_data="time_9_23"),
            InlineKeyboardButton(text="6:00 - 20:00", callback_data="time_6_20")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")
        ]
    ])
    
    await callback.message.edit_text(
        f"‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n\n"
        f"*–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* {start_hour:02d}:00 - {end_hour:02d}:00",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("time_"))
async def callback_set_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
    time_parts = callback.data.split("_")[1:]  # ['8', '22']
    start_hour = int(time_parts[0])
    end_hour = int(time_parts[1])
    
    user_id = callback.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db_manager.update_user_time_settings(user_id, start_hour, end_hour)
    
    # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    await scheduler.cancel_user_reminders(user_id)
    await scheduler.schedule_daily_reminders(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"‚úÖ *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n"
        f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {start_hour:02d}:00 - {end_hour:02d}:00\n\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.clear()


@router.callback_query(F.data == "intake_history")
async def callback_intake_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–µ–º–æ–≤"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–µ–º–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    history = await db_manager.get_user_intake_history(user_id, limit=10)
    
    if not history:
        await callback.message.edit_text(
            "üìã *–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤*\n\n"
            "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–µ–º–æ–≤ –≤–æ–¥—ã –Ω–µ –±—ã–ª–æ.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üíß",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíß –í—ã–ø–∏—Ç—å –≤–æ–¥—É", callback_data="water_intake_250")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")]
            ]),
            parse_mode="Markdown"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
    
    total_ml = 0
    for i, intake in enumerate(history, 1):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        timestamp = intake['timestamp']
        if isinstance(timestamp, str):
            from datetime import datetime
            timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        time_str = timestamp.strftime("%H:%M")
        history_text += f"{i}. {time_str} - {intake['volume']} –º–ª\n"
        total_ml += intake['volume']
    
    history_text += f"\n*–û–±—â–∏–π –æ–±—ä–µ–º:* {total_ml} –º–ª"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíß –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º", callback_data="water_intake_250"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
        ]
    ])
    
    await callback.message.edit_text(
        history_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    await callback_start_journey(callback)

